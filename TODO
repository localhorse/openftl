- Selection box doesn't properly erase itself when drawn over a moving
  sprite!

- Added a bit of code with regards to scaling, but need to think about
  how we'll scale sprite images as well as coordinates.

- Need to fix door loading... it appears to be loading correctly, but
  this is misleading because if a room ever contains 2 horizontal or 2
  vertical doors, we'll have 2 doors literally right on top of each
  other. This will become important when doing the pathfinding code.

- Doors open and close automatically, although sometimes if the guy is
  too slow they will try to close and open again.

- This code needs to be profiled to see where in the game loop we're
  taking up the most time. (Done, but need to follow up.)

- Player movement is MUCH faster in the original FTL. (This is
  partially resolved, player movement is tied to frames per
  second. I've temporarily increased the max FPS, but this is a really
  bad way to do it, I think, and I'll have to increase the increments
  with which the player X, Y are increased.

- Work on some kind of mouse-over highlighting system. For example, in
  the original FTL game the bounding box to click on a door is much
  larger, overlapping the players in some cases. But it seems as
  though player characters take priority in terms of which one is
  highlighted and therefore which one will be activated on mouse
  click.

- FTL doesn't actually order the sprites like I do and draw moving
  characters over idle characters! I guess I just imagined that. Not
  sure if I should remove it yet.

- Rooms are getting so many related methods in the Ship class that we
  might want to look into making it into its own class! The ship class
  will soon have more room-related things than ship-related.

- Rooms need to have a non-sensor mode of drawing where the contents
  are obscured.

* There are a lot of methods that iterate through the room dict or the
  Door objects in Ship. A lot of the related information is called in
  a specific code block. (For example, the recently added room
  occupants.) What we should be doing is, given a room ID, loading a
  bunch of information all in one shot and passing it to the code
  block that will be using the information, so we're not looping
  through a bunch of crap over and over for no reason.

- Make sure characters can't set_goal() to a room they are currently
  already in.

- Figure out why it crashes when you compute a new path before you hit
  the old destination.

* There are basically 4 types of coordinates. Relative to the screen
  surface, relative to the ship surface, and relative to both, but a
  35x35 grid of tiles instead of pixel coordinates. Let's make
  functions that will convert between these coordinates. They will
  have to be methods of Ship or have access to Ship, because that
  class contains the necessary offsets to describe the correct
  location (from the FTL data files). Either that or we'll have to
  move the ship loading out of Ship class which makes less sense.
